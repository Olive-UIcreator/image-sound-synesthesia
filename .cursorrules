# Cursor Rules - 專案架構規範

## 專案架構原則

嚴格遵循以下目錄結構，確保所有檔案都放在正確的位置：

```
/project-name/
├── /src/                # 存放所有原始程式碼 (Source Code)
│   ├── /assets/         # 存放靜態資源，如圖片、字體、音檔
│   │   ├── /images/
│   │   ├── /fonts/
│   │   └── /audio/
│   │
│   ├── /components/     # 存放各個獨立的 UI 元件
│   │   # 你的專案元件會放在這裡，例如 main-canvas.js
│   │
│   ├── /lib/            # 存放可被多個元件共用的函式庫或工具程式碼
│   │   # 你的專案工具會放在這裡，例如 audio-engine.js
│   │
│   └── /main.js         # 專案主程式，負責初始化和管理所有元件
│
├── /index.html          # 網頁的入口檔案
└── /README.md           # 專案說明文件
```

## 檔案分類規則

### 1. 靜態資源 (/src/assets/)
- **圖片檔案**: 所有 `.png`, `.jpg`, `.jpeg`, `.gif`, `.svg`, `.webp` 等圖片檔案
- **字體檔案**: 所有 `.ttf`, `.otf`, `.woff`, `.woff2` 等字體檔案
- **音檔檔案**: 所有 `.mp3`, `.wav`, `.ogg`, `.m4a` 等音檔檔案

### 2. UI 元件 (/src/components/)
- **React/Vue 元件**: `.jsx`, `.tsx`, `.vue` 檔案
- **獨立 UI 元件**: 可重複使用的介面元件
- **頁面元件**: 特定頁面的主要元件
- **表單元件**: 輸入框、按鈕、選單等表單相關元件

### 3. 工具函式庫 (/src/lib/)
- **工具函式**: 共用的 JavaScript/TypeScript 函式
- **API 服務**: 與後端通訊的服務檔案
- **配置檔案**: 環境變數、常數定義
- **第三方整合**: 外部服務的整合程式碼

### 4. 主程式 (/src/main.js)
- **應用程式入口**: 初始化所有元件和服務
- **路由設定**: 頁面路由配置
- **全域狀態管理**: Redux、Vuex 等狀態管理

## 開發規範

### 檔案命名規則
- **元件檔案**: 使用 PascalCase，如 `MainCanvas.js`, `AudioPlayer.jsx`
- **工具檔案**: 使用 camelCase，如 `audioEngine.js`, `dataProcessor.js`
- **靜態資源**: 使用 kebab-case，如 `background-image.png`, `main-font.woff2`

### 程式碼組織
- **單一職責**: 每個檔案只負責一個主要功能
- **模組化**: 將相關功能組織在對應的目錄中
- **可重用性**: 將可重複使用的程式碼放在 `/lib/` 目錄

### 修改範圍控制
- **最小化修改**: 只修改必要的檔案，避免不必要的變更
- **影響評估**: 修改前評估對其他檔案的影響
- **向後相容**: 保持 API 的向後相容性

## 檔案操作指令

### 新增檔案時
1. 確認檔案類型屬於哪個分類
2. 將檔案放在正確的目錄中
3. 遵循命名規範
4. 更新相關的 import/export 語句

### 修改檔案時
1. 確認修改範圍不會影響其他模組
2. 保持現有的程式碼風格
3. 更新相關的註解和文件

### 刪除檔案時
1. 檢查是否有其他檔案依賴此檔案
2. 移除相關的 import 語句
3. 更新相關文件

## 效能優化原則
- **按需載入**: 使用動態 import 載入大型模組
- **資源壓縮**: 確保圖片和音檔經過適當壓縮
- **快取策略**: 實作適當的快取機制
- **程式碼分割**: 將大型檔案分割成較小的模組

## 文件維護
- **README.md**: 保持專案說明文件的最新狀態
- **程式碼註解**: 為複雜的邏輯添加清楚的註解
- **API 文件**: 為公開的函式和元件提供文件

## 檢查清單
在每次提交前確認：
- [ ] 檔案放在正確的目錄中
- [ ] 遵循命名規範
- [ ] 沒有不必要的檔案變更
- [ ] 相關的 import/export 已更新
- [ ] 程式碼風格一致
- [ ] 效能影響已評估
